def versions = [
    androidTest: "1.1.0-alpha4",
    espresso: "3.1.0-alpha4",
    robolectric: "3.8",
    archComponents: "1.1.1",
    androidx: "1.0.0",
    supportLibrary: "28.0.0",
    multidex: "1.0.3",
    errorProne: "2.3.1",
    errorPronePlugin: "0.6",
    kotlin: "1.2.71",
    stetho: "1.5.0",
    okhttp3: "3.11.0",
    retrofit: "2.4.0",
    kotshi: "1.0.5",
    dagger: "2.16",
    googleServices: "4.1.0",
    detekt: "1.0.0.RC9.2",
    ktlint: "0.29.0",
    ktlintGradle: "6.2.0",
    fabricGradleTool: "1.25.4",
    gradleVersions: "0.20.0",
    jacoco: "0.8.2",
    permissionDispatcher: "3.3.1",
    licenseToolPlugin: "1.5.0",
    firebase: "12.0.0",
    kotpref: "2.6.0"
]

def build = [
    buildToolsVersion: '28.0.3',
    compileSdkVersion: 28,
    ci: 'true' == System.getenv('CI'),
    minSdkVersion: 16,
    targetSdkVersion: 28,

    errorProne: "com.google.errorprone:error_prone_core:${versions.errorProne}",
    errorProneCheckApi: "com.google.errorprone:error_prone_check_api:${versions.errorProne}",
    errorProneTestHelpers: "com.google.errorprone:error_prone_test_helpers:${versions.errorProne}",
    nullAway: 'com.uber.nullaway:nullaway:0.6.0',

    gradlePlugins: [
        android: 'com.android.tools.build:gradle:3.2.1',
        errorProne: "net.ltgt.gradle:gradle-errorprone-plugin:${versions.errorPronePlugin}",
        dokka: "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}",
        dokkaAndroid: "org.jetbrains.dokka:dokka-android-gradle-plugin:${versions.dokka}",
        kotlin: "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",
        googleServices: "com.google.gms:google-services:${versions.googleServices}",
        licenseTools: "com.cookpad.android.licensetools:license-tools-plugin:${versions.licenseToolPlugin}",
        gradleVersions: "com.github.ben-manes:gradle-versions-plugin:${versions.gradleVersions}",
        jacoco: "org.jacoco:org.jacoco.core:${versions.jacoco}",
        detekt: "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${versions.detekt}",
        ktlint: "gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:${versions.ktlintGradle}",
        fabric: "io.fabric.tools:gradle:${versions.fabricGradleTool}"
    ]
]

def kotlin = [
    stdlib: "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
    reflect: "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"
]

def okhttp3 = [
    core: "com.squareup.okhttp3:okhttp:${versions.okhttp3}",
    loggingIntercepter: "com.squareup.okhttp3:logging-interceptor:${versions.okhttp3}"
]

def retrofit = [
    core: "com.squareup.retrofit2:retrofit:${versions.retrofit}",
    converterMoshi: "com.squareup.retrofit2:converter-moshi:${versions.retrofit}",
    adapterRxJava2: "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}",
]

def kotshi = [
    api: "se.ansman.kotshi:api:${versions.kotshi}",
    compiler: "se.ansman.kotshi:compiler:${versions.kotshi}"
]

def rx = [
    android: 'io.reactivex.rxjava2:rxandroid:2.1.0',
    java: 'io.reactivex.rxjava2:rxjava:2.2.2'
]

def dagger = [
    core: "com.google.dagger:dagger:${versions.dagger}",
    compiler: "com.google.dagger:dagger-compiler:${versions.dagger}",
    android: "com.google.dagger:dagger-android:${versions.dagger}",
    androidSupport: "com.google.dagger:dagger-android-support:${versions.dagger}",
    androidProcessor: "com.google.dagger:dagger-android-processor:${versions.dagger}",
]

def androidx = [
    ktx: "androidx.core:core-ktx:0.3",
    appcompat: "com.android.support:appcompat-v7:${versions.supportLibrary}",
    cardview: "com.android.support:cardview-v7:${versions.supportLibrary}",
    fragment: "com.android.support:support-v13:${versions.supportLibrary}",
    gridlayout: "com.android.support:gridlayout-v7:${versions.supportLibrary}",
    mediarouter: "com.android.support:mediarouter-v7:${versions.supportLibrary}",
    palette: "com.android.support:palette-v7:${versions.supportLibrary}",
    preference: "com.android.support:preference-v7:${versions.supportLibrary}",
    supportVectorDrawable: "com.android.support:support-vector-drawable:${versions.supportLibrary}",
    animatedVectorDrawable: "com.android.support:animated-vector-drawable:${versions.supportLibrary}",
    material: "com.android.support:design:${versions.supportLibrary}",
    browser: "com.android.support:customtabs:${versions.supportLibrary}",
    recyclerview: "com.android.support:recyclerview-v7:${versions.supportLibrary}",
    constraint: "com.android.support.constraint:constraint-layout:1.1.3",
    multidex: "com.android.support:multidex:${versions.multidex}",
    multidexInstrumentation: "com.android.support:multidex-instrumentation:${versions.multidex}",
]

def arch = [
    lifecycle: [
        runtime: "android.arch.lifecycle:runtime:${versions.archComponents}",
        viewmodel: "android.arch.lifecycle:viewmodel:${versions.archComponents}",
        livedata: "android.arch.lifecycle:livedata:${versions.archComponents}",
        extensions: "android.arch.lifecycle:extensions:${versions.archComponents}",
        reactivestreams: "android.arch.lifecycle:reactivestreams:${versions.archComponents}",
        compiler: "android.arch.lifecycle:compiler:${versions.archComponents}"
    ],
    room: [
        runtime: "android.arch.persistence.room:runtime:${versions.archComponents}",
        rxjava2: "android.arch.persistence.room:rxjava2:${versions.archComponents}",
        compiler: "android.arch.persistence.room:compiler:${versions.archComponents}",
        testing: "android.arch.persistence.room:testing:${versions.archComponents}"
    ],
    test: [
        androidTesting: "android.arch.core:core-testing:${versions.archComponents}"
    ]
]

def playService = [
    map: "com.google.android.gms:play-services-maps:${versions.firebase}"
]

def firebase = [
    core: "com.google.firebase:firebase-core:${versions.firebase}",
    firestore: "com.google.firebase:firebase-firestore:${versions.firebase}",
    auth: "com.google.firebase:firebase-auth:${versions.firebase}",
    messaging: "com.google.firebase:firebase-messaging:${versions.firebase}"
]

def permissionDispatcher = [
    api: "com.github.hotchemi:permissionsdispatcher:${versions.permissionDispatcher}",
    processor: "com.github.hotchemi:permissionsdispatcher-processor:${versions.permissionDispatcher}"
]

def kotpref = [
    kotpref: "com.chibatching.kotpref:kotpref:${versions.kotpref}",
    initializer: "com.chibatching.kotpref:initializer:${versions.kotpref}",
    enumSupport: "com.chibatching.kotpref:enum-support:${versions.kotpref}"
]

def stetho = [
    core: "com.facebook.stetho:stetho:${versions.stetho}",
    okhttp3: "com.facebook.stetho:stetho-okhttp3:${versions.stetho}",
    timber: "com.facebook.stetho:stetho-timber:${versions.stetho}"
]

def debug = [
    crashlytics: 'com.crashlytics.sdk.android:crashlytics:2.9.5@aar',
    timber: 'com.jakewharton.timber:timber:4.7.1',
    leakcanary: 'com.squareup.leakcanary:leakcanary-android:1.6.1',
    debot: 'com.tomoima.debot:debot:2.0.4'
]

def misc = [
    threetenabp: 'com.jakewharton.threetenabp:threetenabp:1.1.1',
    threetenbp: 'org.threeten:threetenbp:1.3.7'
]

def robolectric = [
    core: "org.robolectric:robolectric:${versions.robolectric}",
    supportv4: "org.robolectric:shadows-supportv4:${versions.robolectric}",
    multidex: "org.robolectric:shadows-multidex:${versions.robolectric}"
]

def test = [
    assertk: 'com.willowtreeapps.assertk:assertk:0.10',
    androidRunner: "androidx.test:runner:${versions.androidTest}",
    androidRules: "androidx.test:rules:${versions.androidTest}",
    espresso: "androidx.test.espresso:espresso-core:${versions.espresso}",
    contrib: "androidx.test.espresso:espresso-contrib:${versions.espresso}",
    junit: 'junit:junit:4.12',
    mockitoKotlin: 'com.nhaarman:mockito-kotlin:1.6.0',
    truth: 'com.google.truth:truth:0.40',
    screenshot: "com.facebook.testing.screenshot:core:0.8.0@jar"
]

ext.deps = [
    "build": build,
    "kotlin": kotlin,
    "okhttp3": okhttp3,
    "retrofit": retrofit,
    "kotshi": kotshi,
    "rx": rx,
    "dagger": dagger,
    "androidx": androidx,
    "arch": arch,
    "playService": playService,
    "firebase": firebase,
    "permissionDispatcher": permissionDispatcher,
    "kotpref": kotpref,
    "stetho": stetho,
    "debug": debug,
    "misc": misc,
    "robolectric": robolectric,
    "test": test,
    "versions": versions
]
