import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"
apply plugin: "com.github.ben-manes.versions"
// apply plugin: "com.google.gms.google-services"
// apply plugin: "io.fabric"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "org.jlleitschuh.gradle.ktlint"

// Manifest version
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

android {
    compileSdkVersion = deps.build.compileSdkVersion
    buildToolsVersion = deps.build.buildToolsVersion

    defaultConfig {
        applicationId "io.github.zncmn.android"
        minSdkVersion deps.build.minSdkVersion
        targetSdkVersion deps.build.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "$versionMajor.$versionMinor.$versionPatch"
        testInstrumentationRunner "app.test.TestAppRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ "room.schemaLocation": "$projectDir/schemas".toString() ]
            }
        }
    }
    applicationVariants.all {
        resValue("string", "versionInfo", defaultConfig.versionName)
    }
    signingConfigs {
        getByName("debug") {
            storeFile = rootProject.file("debug.keystore")
            storePassword = "android"
            keyAlias = "androiddebugkey"
            keyPassword = "android"
        }
        create("release") {
            storeFile = rootProject.file("release.keystore")
            storePassword = System.getenv("ANDROID_KEYSTORE_PASSWORD")
            keyAlias = System.getenv("ANDROID_KEYSTORE_ALIAS")
            keyPassword = System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
        }
    }
    buildTypes {
        getByName("debug") {
            signingConfig = signingConfigs.getByName("debug")
            applicationIdSuffix = ".debug"
            versionNameSuffix = "-debug"
        }
        getByName("release") {
            signingConfig = signingConfigs.getByName("release")
            debuggable = false
            zipAlignEnabled = true
            minifyEnabled = true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    // global proguard settings
                    "proguard-rules.pro"
                    // library proguard settings
                    rootProject.file("proguard").listFiles().find { it.name.startsWith("proguard") }
        }
    }
    testOptions {
        unitTests.returnDefaultValues true
        unitTests.includeAndroidResources true
    }
    lintOptions {
        lintConfig file("lint.xml")
        textReport true
        textOutput "stdout"
    }
    // Optimize APK size - remove excess files in the manifest and APK
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude "**/*.kotlin_module"
        exclude "**/*.version"
        exclude "**/kotlin/**"
        exclude "**/*.txt"
        exclude "**/*.xml"
        exclude "**/*.properties"
    }
}

androidExtensions {
    experimental false
}

kapt {
    useBuildCache false
    correctErrorTypes true
    mapDiagnosticLocations false
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas")
    }
}

detekt {
    toolVersion = deps.versions.detekt
    input = files("src/main/kotlin")
    config = rootProject.files("quality/detekt.yml")
    filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
}

ktlint {
    version = deps.versions.ktlint
    android = true
    outputToConsole = true
    reporters = [ReporterType.CHECKSTYLE]
    ignoreFailures = true
}

dependencies {
    // Kotlin
    implementation deps.kotlin.stdlib

//==================== Android Jetpack Library ====================
    implementation deps.androidx.ktx
    implementation deps.androidx.fragment
    implementation deps.androidx.appcompat
    implementation deps.androidx.material
    implementation deps.androidx.cardview
    implementation deps.androidx.browser
    implementation deps.androidx.constraint
    implementation deps.androidx.multidex
    implementation deps.androidx.preference

//==================== Network ====================
    implementation deps.okhttp3.core
    implementation deps.okhttp3.loggingIntercepter

    implementation deps.retrofit.core
    implementation deps.retrofit.converterMoshi
    implementation deps.retrofit.adapterRxJava2

//==================== Structure ====================
    implementation(deps.kotshi.api) {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jre7"
    }
    kapt deps.kotshi.compiler

    implementation deps.arch.lifecycle.runtime
    implementation deps.arch.lifecycle.viewmodel
    implementation deps.arch.lifecycle.livedata
    implementation deps.arch.lifecycle.extensions
    implementation deps.arch.lifecycle.reactivestreams
    kapt deps.arch.lifecycle.compiler
    implementation deps.arch.room.runtime
    implementation deps.arch.room.rxjava2
    kapt deps.arch.room.compiler

    implementation deps.rx.java
    implementation deps.rx.android

    implementation deps.dagger.core
    implementation deps.dagger.android
    implementation deps.dagger.androidSupport
    kapt deps.dagger.compiler
    kapt deps.dagger.androidProcessor

    implementation deps.playService.map

    implementation deps.firebase.core
    implementation deps.firebase.messaging

    implementation deps.misc.threetenabp
    api deps.misc.threetenbp + ':no-tzdb'

    implementation deps.kotpref.kotpref
    implementation deps.kotpref.initializer
    implementation deps.kotpref.enumSupport

    implementation deps.permissionDispatcher.api
    kapt deps.permissionDispatcher.processor

//==================== UI ====================

//==================== Debug ====================
    debugImplementation deps.stetho.core
    debugImplementation deps.stetho.okhttp3
    debugImplementation deps.stetho.timber

    implementation(deps.debug.crashlytics) {
        transitive = true
    }

    implementation deps.debug.timber

    debugImplementation deps.debug.leakcanary

    debugImplementation(deps.debug.debot) {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jre7"
    }

//==================== Test ====================
    testImplementation deps.kotlin.reflect

    testImplementation deps.test.junit
    testImplementation deps.test.mockitoKotlin
    testImplementation deps.test.assertk

    testImplementation deps.robolectric.core
    testImplementation deps.robolectric.supportv4
    testImplementation deps.robolectric.multidex

    testImplementation deps.misc.threetenbp

    testImplementation deps.test.androidTesting
    testImplementation deps.arch.room.testing

    androidTestImplementation deps.test.androidRunner
    androidTestImplementation deps.test.espresso
    androidTestImplementation deps.test.contrib
    androidTestImplementation deps.androidx.multidexInstrumentation
    androidTestImplementation deps.test.assertk
    androidTestImplementation deps.test.screenshot
}
